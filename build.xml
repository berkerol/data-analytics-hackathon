<?xml version="1.0" encoding="UTF8"?>
<! You may freely edit this file. See commented blocks below for >
<! some examples of how to customize the build. >
<! (If you delete it and reopen the project it will be recreated.) >
<! By default, only the Clean and Build commands use this build script. >
<! Commands such as Run, Debug, and Test only use this build script if >
<! the Compile on Save feature is turned off for the project. >
<! You can turn off the Compile on Save (or Deploy on Save) setting >
<! in the project's Project Properties dialog box.>
<project name="Hackathon" default="default" basedir=".">
    <description>Builds, tests, and runs the project Hackathon.</description>
    <import file="nbproject/buildimpl.xml"/>
    <!

    There exist several targets which are by default empty and which can be 
    used for execution of your tasks. These targets are usually executed 
    before and after some main targets. They are: 

      preinit:                 called before initialization of project properties
      postinit:                called after initialization of project properties
      precompile:              called before javac compilation
      postcompile:             called after javac compilation
      precompilesingle:       called before javac compilation of single file
      postcompilesingle:      called after javac compilation of single file
      precompiletest:         called before javac compilation of JUnit tests
      postcompiletest:        called after javac compilation of JUnit tests
      precompiletestsingle:  called before javac compilation of single JUnit test
      postcompiletestsingle: called after javac compilation of single JUunit test
      prejar:                  called before JAR building
      postjar:                 called after JAR building
      postclean:               called after cleaning build products

    (Targets beginning with '' are not intended to be called on their own.)

    Example of inserting an obfuscator after compilation could look like this:

        <target name="postcompile">
            <obfuscate>
                <fileset dir="${build.classes.dir}"/>
            </obfuscate>
        </target>

    For list of available properties check the imported 
    nbproject/buildimpl.xml file. 


    Another way to customize the build is by overriding existing main targets.
    The targets of interest are: 

      initmacrodefjavac:     defines macro for javac compilation
      initmacrodefjunit:     defines macro for junit execution
      initmacrodefdebug:     defines macro for class debugging
      initmacrodefjava:      defines macro for class execution
      dojar:                  JAR building
      run:                      execution of project 
      javadocbuild:           Javadoc generation
      testreport:              JUnit report generation

    An example of overriding the target for project execution could look like this:

        <target name="run" depends="Hackathonimpl.jar">
            <exec dir="bin" executable="launcher.exe">
                <arg file="${dist.jar}"/>
            </exec>
        </target>

    Notice that the overridden target depends on the jar target and not only on 
    the compile target as the regular run target does. Again, for a list of available 
    properties which you can use, check the target you are overriding in the
    nbproject/buildimpl.xml file. 

    >
</project>
